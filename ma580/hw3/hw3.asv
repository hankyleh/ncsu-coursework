T = [0.0100 0.0400 0.1400 0.2100 0.2200 0.3800 0.4600 0.4800 0.6000 0.6600 0.7200 0.7900 0.9200 0.9700 0.9900]';
F = [0.0639 -0.0973 0.5178 0.9686 0.7827 0.9832 0.8183 0.6544 0.3314 0.0661 -0.1612 -0.5417 -1.0467 -1.0230 -1.0262]';
  
direct_solve(T, F, 3)
direct_solve(T, F, 3)

N = 1:14;
data = zeros(14, 3); % Ouput table for report
data(:, 1) = N';


for n = N
    x_direct = direct_solve(T, F, n)
    x_qr     = qr_solve(T, F, n)
    
    soln_direct = polyval(x_direct, T)
    soln_qr     = polyval(x_qr, T)

    err_direct  = norm(soln_direct - F, 2)/norm(F, 2)
    err_qr      = norm(soln_qr     - F, 2)/norm(F, 2)

    data(n, 2:3) = [err_direct err_qr]
end


N = 2:5;

plt_t = linspace(min(T), max(T), 100);

%% plots
for n=N
    x_qr     = qr_solve(T, F, n)
    phi_t = polyval(x_qr, plt_t);

    figure()
    hold on
    scatter(T, F, "filled")
    plot(plt_t, phi_t)
    hold off
    legend("$(t_i, f_i)$", "$\varphi(t)$", interpreter="latex")
    title(sprintf("Polynomial Interpolation, N=%i", n))
    saveas(gcf, "fig_"+n+".png")
end

%%
x_qr     = qr_solve(T, F, 14);
x_direct = direct_solve(T, F, 14);
phi_qr = polyval(x_qr, plt_t);
phi_direct = polyval(x_direct, plt_t);

figure()
hold on
scatter(T, F)
plot(plt_t, phi_direct, LineStyle="--")
plot(plt_t, phi_qr)
legend("$(t_i, f_i)$", "$\varphi_{direct}(t)$","$\varphi_{QR}(t)$", interpreter="latex")


%% print data to latex

output_string = '';
for i = 1:14
    for j = 1:3
        output_string = output_string+data(i, j)+'&';
    end
    % output_string = output_string(1:end-1) + '\n';
end

output_string


%% functions
function x = direct_solve(t, f, n)
    m = length(t);
    t = reshape(t, [m 1]);
    f = reshape(f, [m 1]);
    A = ones(m, n);

    for i = 1:n-1
        A(:, n-i) = t.^(i);
    end
    x = (A' * A)\(A' * f)
end

function x = qr_solve(t, f, n)
    m = length(t);
    t = reshape(t, [m 1]);
    f = reshape(f, [m 1]);
    A = ones(m, n);

    for i = 1:n-1
        A(:, n-i) = t.^(i);
    end
    [Q,R] = qr(A, 0);
    z = Q' * f;
    x = UTriSol(R, z, length(z)); % from K. Ming Leung, 01/26/03
end